<?php

/**
 * This file is part of the Zemit Framework.
 *
 * (c) Zemit Team <contact@zemit.com>
 *
 * For the full copyright and license information, please view the LICENSE.txt
 * file that was distributed with this source code.
 *
 * --------------------------------------------------------------
 *
 * New BSD License
 *
 * Copyright (c) 2017-present, Zemit CMS Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Zemit nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ZEMIT FRAMEWORK TEAM BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Zemit\Models\Base;

/**
 * AbstractJob
 * 
 * @package Zemit\Models\Base
 * @autogenerated by Phalcon Developer Tools
 * @date 2020-07-12, 19:34:00
 */
abstract class AbstractJob extends \Zemit\Models\Base
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(column="id", type="integer", length=10, nullable=false)
     */
    protected $id;

    /**
     *
     * @var string
     * @Column(column="name", type="string", length=120, nullable=false)
     */
    protected $name;

    /**
     *
     * @var string
     * @Column(column="slug", type="string", length=120, nullable=false)
     */
    protected $slug;

    /**
     *
     * @var string
     * @Column(column="type", type="string", length=20, nullable=false)
     */
    protected $type;

    /**
     *
     * @var integer
     * @Column(column="second", type="integer", length=2, nullable=true)
     */
    protected $second;

    /**
     *
     * @var integer
     * @Column(column="minute", type="integer", length=2, nullable=true)
     */
    protected $minute;

    /**
     *
     * @var integer
     * @Column(column="hour", type="integer", length=2, nullable=true)
     */
    protected $hour;

    /**
     *
     * @var integer
     * @Column(column="day", type="integer", length=2, nullable=true)
     */
    protected $day;

    /**
     *
     * @var integer
     * @Column(column="month", type="integer", length=2, nullable=true)
     */
    protected $month;

    /**
     *
     * @var integer
     * @Column(column="year", type="integer", length=4, nullable=true)
     */
    protected $year;

    /**
     *
     * @var string
     * @Column(column="javascript", type="string", nullable=true)
     */
    protected $javascript;

    /**
     *
     * @var string
     * @Column(column="meta", type="string", nullable=true)
     */
    protected $meta;

    /**
     *
     * @var string
     * @Column(column="last_run_result", type="string", nullable=true)
     */
    protected $lastRunResult;

    /**
     *
     * @var string
     * @Column(column="last_run_status", type="string", length=1, nullable=false)
     */
    protected $lastRunStatus;

    /**
     *
     * @var integer
     * @Column(column="run_count", type="integer", length=20, nullable=false)
     */
    protected $runCount;

    /**
     *
     * @var integer
     * @Column(column="success_count", type="integer", length=20, nullable=false)
     */
    protected $successCount;

    /**
     *
     * @var integer
     * @Column(column="error_count", type="integer", length=20, nullable=false)
     */
    protected $errorCount;

    /**
     *
     * @var string
     * @Column(column="scheduled_at", type="string", nullable=true)
     */
    protected $scheduledAt;

    /**
     *
     * @var string
     * @Column(column="ran_at", type="string", nullable=true)
     */
    protected $ranAt;

    /**
     *
     * @var string
     * @Column(column="created_at", type="string", nullable=false)
     */
    protected $createdAt;

    /**
     *
     * @var string
     * @Column(column="updated_at", type="string", nullable=true)
     */
    protected $updatedAt;

    /**
     *
     * @var string
     * @Column(column="deleted_at", type="string", nullable=true)
     */
    protected $deletedAt;

    /**
     *
     * @var string
     * @Column(column="deprecated_at", type="string", nullable=true)
     */
    protected $deprecatedAt;

    /**
     *
     * @var string
     * @Column(column="deleted", type="string", length=1, nullable=false)
     */
    protected $deleted;

    /**
     *
     * @var string
     * @Column(column="deprecated", type="string", length=1, nullable=false)
     */
    protected $deprecated;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field slug
     *
     * @param string $slug
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Method to set the value of field type
     *
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Method to set the value of field second
     *
     * @param integer $second
     * @return $this
     */
    public function setSecond($second)
    {
        $this->second = $second;

        return $this;
    }

    /**
     * Method to set the value of field minute
     *
     * @param integer $minute
     * @return $this
     */
    public function setMinute($minute)
    {
        $this->minute = $minute;

        return $this;
    }

    /**
     * Method to set the value of field hour
     *
     * @param integer $hour
     * @return $this
     */
    public function setHour($hour)
    {
        $this->hour = $hour;

        return $this;
    }

    /**
     * Method to set the value of field day
     *
     * @param integer $day
     * @return $this
     */
    public function setDay($day)
    {
        $this->day = $day;

        return $this;
    }

    /**
     * Method to set the value of field month
     *
     * @param integer $month
     * @return $this
     */
    public function setMonth($month)
    {
        $this->month = $month;

        return $this;
    }

    /**
     * Method to set the value of field year
     *
     * @param integer $year
     * @return $this
     */
    public function setYear($year)
    {
        $this->year = $year;

        return $this;
    }

    /**
     * Method to set the value of field javascript
     *
     * @param string $javascript
     * @return $this
     */
    public function setJavascript($javascript)
    {
        $this->javascript = $javascript;

        return $this;
    }

    /**
     * Method to set the value of field meta
     *
     * @param string $meta
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->meta = $meta;

        return $this;
    }

    /**
     * Method to set the value of field last_run_result
     *
     * @param string $lastRunResult
     * @return $this
     */
    public function setLastRunResult($lastRunResult)
    {
        $this->lastRunResult = $lastRunResult;

        return $this;
    }

    /**
     * Method to set the value of field last_run_status
     *
     * @param string $lastRunStatus
     * @return $this
     */
    public function setLastRunStatus($lastRunStatus)
    {
        $this->lastRunStatus = $lastRunStatus;

        return $this;
    }

    /**
     * Method to set the value of field run_count
     *
     * @param integer $runCount
     * @return $this
     */
    public function setRunCount($runCount)
    {
        $this->runCount = $runCount;

        return $this;
    }

    /**
     * Method to set the value of field success_count
     *
     * @param integer $successCount
     * @return $this
     */
    public function setSuccessCount($successCount)
    {
        $this->successCount = $successCount;

        return $this;
    }

    /**
     * Method to set the value of field error_count
     *
     * @param integer $errorCount
     * @return $this
     */
    public function setErrorCount($errorCount)
    {
        $this->errorCount = $errorCount;

        return $this;
    }

    /**
     * Method to set the value of field scheduled_at
     *
     * @param string $scheduledAt
     * @return $this
     */
    public function setScheduledAt($scheduledAt)
    {
        $this->scheduledAt = $scheduledAt;

        return $this;
    }

    /**
     * Method to set the value of field ran_at
     *
     * @param string $ranAt
     * @return $this
     */
    public function setRanAt($ranAt)
    {
        $this->ranAt = $ranAt;

        return $this;
    }

    /**
     * Method to set the value of field created_at
     *
     * @param string $createdAt
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Method to set the value of field updated_at
     *
     * @param string $updatedAt
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Method to set the value of field deleted_at
     *
     * @param string $deletedAt
     * @return $this
     */
    public function setDeletedAt($deletedAt)
    {
        $this->deletedAt = $deletedAt;

        return $this;
    }

    /**
     * Method to set the value of field deprecated_at
     *
     * @param string $deprecatedAt
     * @return $this
     */
    public function setDeprecatedAt($deprecatedAt)
    {
        $this->deprecatedAt = $deprecatedAt;

        return $this;
    }

    /**
     * Method to set the value of field deleted
     *
     * @param string $deleted
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->deleted = $deleted;

        return $this;
    }

    /**
     * Method to set the value of field deprecated
     *
     * @param string $deprecated
     * @return $this
     */
    public function setDeprecated($deprecated)
    {
        $this->deprecated = $deprecated;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Returns the value of field slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Returns the value of field type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Returns the value of field second
     *
     * @return integer
     */
    public function getSecond()
    {
        return $this->second;
    }

    /**
     * Returns the value of field minute
     *
     * @return integer
     */
    public function getMinute()
    {
        return $this->minute;
    }

    /**
     * Returns the value of field hour
     *
     * @return integer
     */
    public function getHour()
    {
        return $this->hour;
    }

    /**
     * Returns the value of field day
     *
     * @return integer
     */
    public function getDay()
    {
        return $this->day;
    }

    /**
     * Returns the value of field month
     *
     * @return integer
     */
    public function getMonth()
    {
        return $this->month;
    }

    /**
     * Returns the value of field year
     *
     * @return integer
     */
    public function getYear()
    {
        return $this->year;
    }

    /**
     * Returns the value of field javascript
     *
     * @return string
     */
    public function getJavascript()
    {
        return $this->javascript;
    }

    /**
     * Returns the value of field meta
     *
     * @return string
     */
    public function getMeta()
    {
        return $this->meta;
    }

    /**
     * Returns the value of field lastRunResult
     *
     * @return string
     */
    public function getLastRunResult()
    {
        return $this->lastRunResult;
    }

    /**
     * Returns the value of field lastRunStatus
     *
     * @return string
     */
    public function getLastRunStatus()
    {
        return $this->lastRunStatus;
    }

    /**
     * Returns the value of field runCount
     *
     * @return integer
     */
    public function getRunCount()
    {
        return $this->runCount;
    }

    /**
     * Returns the value of field successCount
     *
     * @return integer
     */
    public function getSuccessCount()
    {
        return $this->successCount;
    }

    /**
     * Returns the value of field errorCount
     *
     * @return integer
     */
    public function getErrorCount()
    {
        return $this->errorCount;
    }

    /**
     * Returns the value of field scheduledAt
     *
     * @return string
     */
    public function getScheduledAt()
    {
        return $this->scheduledAt;
    }

    /**
     * Returns the value of field ranAt
     *
     * @return string
     */
    public function getRanAt()
    {
        return $this->ranAt;
    }

    /**
     * Returns the value of field createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Returns the value of field updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Returns the value of field deletedAt
     *
     * @return string
     */
    public function getDeletedAt()
    {
        return $this->deletedAt;
    }

    /**
     * Returns the value of field deprecatedAt
     *
     * @return string
     */
    public function getDeprecatedAt()
    {
        return $this->deprecatedAt;
    }

    /**
     * Returns the value of field deleted
     *
     * @return string
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     * Returns the value of field deprecated
     *
     * @return string
     */
    public function getDeprecated()
    {
        return $this->deprecated;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
		parent::initialize();
        // $this->setSchema("zemit");
        $this->setSource("job");
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return AbstractJob[]|AbstractJob|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null): \Phalcon\Mvc\Model\ResultsetInterface
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return AbstractJob|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'id' => 'id',
            'name' => 'name',
            'slug' => 'slug',
            'type' => 'type',
            'second' => 'second',
            'minute' => 'minute',
            'hour' => 'hour',
            'day' => 'day',
            'month' => 'month',
            'year' => 'year',
            'javascript' => 'javascript',
            'meta' => 'meta',
            'last_run_result' => 'lastRunResult',
            'last_run_status' => 'lastRunStatus',
            'run_count' => 'runCount',
            'success_count' => 'successCount',
            'error_count' => 'errorCount',
            'scheduled_at' => 'scheduledAt',
            'ran_at' => 'ranAt',
            'created_at' => 'createdAt',
            'updated_at' => 'updatedAt',
            'deleted_at' => 'deletedAt',
            'deprecated_at' => 'deprecatedAt',
            'deleted' => 'deleted',
            'deprecated' => 'deprecated'
        ];
    }

}
